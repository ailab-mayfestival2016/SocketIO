cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
PROJECT(sioclient)

#option(BUILD_SHARED_LIBS "Build the shared library" OFF)
#option(Boost_USE_STATIC_LIBS "Use Boost static version" ON)

set(MAJOR 0)
set(MINOR 1)
set(PATCH 0)

if(NOT CMAKE_BUILD_TYPE )
MESSAGE(STATUS "not define build type, set to release" )
set(CMAKE_BUILD_TYPE Release )
elseif(NOT (${CMAKE_BUILD_TYPE} STREQUAL "Release" OR ${CMAKE_BUILD_TYPE} STREQUAL "Debug" ))
MESSAGE(SEND_ERROR "CMAKE_BUILD_TYPE must be either Release or Debug")
return()
endif()

set(BOOST_VER "1.55.0" CACHE STRING "boost version" )
set(Boost_USE_STATIC_LIBS ON)
set(BUILD_SHARED_LIBS OFF)
set(Boost_USE_MULTITHREADED ON) 
set(Boost_USE_STATIC_RUNTIME OFF) 
#add_definitions( -DBOOST_SYSTEM_NO_DEPRECATED ) 
#add_definitions( -DBOOST_DATE_TIME_NO_LIB )
#add_definitions( -DBOOST_REGEX_NO_LIB )
#add_definitions( -DBOOST_ERROR_CODE_HEADER_ONLY )
#add_definitions( -DBOOST_SYSTEM_NO_LIB )
find_package(Boost ${BOOST_VER} REQUIRED COMPONENTS system date_time random) 

aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/Cpp ALL_SRC)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/Dependency/socket.io-client-cpp/src ALL_SRC)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/Dependency/socket.io-client-cpp/src/internal ALL_SRC)
file(GLOB ALL_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/src/Cpp/*.h ${CMAKE_CURRENT_SOURCE_DIR}/Dependency/socket.io-client-cpp/src/*.h)
set(SIO_INCLUDEDIR ${CMAKE_CURRENT_SOURCE_DIR})

add_library(sioclient STATIC ${ALL_SRC})
target_include_directories(sioclient PRIVATE 
    ${Boost_INCLUDE_DIRS}
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Dependency/socket.io-client-cpp/src 
    ${CMAKE_CURRENT_SOURCE_DIR}/Dependency/socket.io-client-cpp/lib/websocketpp 
    ${CMAKE_CURRENT_SOURCE_DIR}/Dependency/socket.io-client-cpp/lib/rapidjson/include
)

set_property(TARGET sioclient PROPERTY CXX_STANDARD 11)
set_property(TARGET sioclient PROPERTY CXX_STANDARD_REQUIRED ON)
MESSAGE("BOOSTLIB=" ${Boost_LIBRARIES})
target_link_libraries(sioclient PRIVATE ${Boost_LIBRARIES})
if(BUILD_SHARED_LIBS)
set_target_properties(sioclient
	PROPERTIES
		SOVERSION ${MAJOR}
		VERSION ${MAJOR}.${MINOR}.${PATCH}
	)
endif()
list(APPEND TARGET_LIBRARIES sioclient)

find_package(OpenSSL)
if(OPENSSL_FOUND)
add_library(sioclient_tls ${ALL_SRC})
target_include_directories(sioclient_tls PRIVATE 
    ${Boost_INCLUDE_DIRS}
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Dependency/socket.io-client-cpp/src 
    ${CMAKE_CURRENT_SOURCE_DIR}/Dependency/socket.io-client-cpp/lib/websocketpp 
    ${CMAKE_CURRENT_SOURCE_DIR}/Dependency/socket.io-client-cpp/lib/rapidjson/include
    ${OPENSSL_INCLUDE_DIR}
)

set_property(TARGET sioclient_tls PROPERTY CXX_STANDARD 11)
set_property(TARGET sioclient_tls PROPERTY CXX_STANDARD_REQUIRED ON)
target_link_libraries(sioclient_tls PRIVATE ${Boost_LIBRARIES} ${OPENSSL_LIBRARIES} )
target_compile_definitions(sioclient_tls PRIVATE -DSIO_TLS)
if(BUILD_SHARED_LIBS)
set_target_properties(sioclient_tls
	PROPERTIES
		SOVERSION ${MAJOR}
		VERSION ${MAJOR}.${MINOR}.${PATCH}
	)
endif()
list(APPEND TARGET_LIBRARIES sioclient_tls)

endif()
#include (mergestaticlibs.cmake)
install(FILES ${ALL_HEADERS} 
    DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/Cpp/include"
)

install(TARGETS ${TARGET_LIBRARIES}
    DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/Cpp/lib/${CMAKE_BUILD_TYPE}"
)
#Boostライブラリをターゲットにマージ
macro(FILTER_LIST INPUT OUTPUT GOOD BAD)
  set(LST ${INPUT})   # can we avoid this?
  set(PICKME YES)
  foreach(ELEMENT IN LISTS LST)
    if(${ELEMENT} STREQUAL general OR ${ELEMENT} STREQUAL ${GOOD})
      set(PICKME YES)
    elseif(${ELEMENT} STREQUAL ${BAD})
      set(PICKME NO)
    elseif(PICKME)
      list(APPEND ${OUTPUT} ${ELEMENT})
    endif()
  endforeach()
endmacro(FILTER_LIST)
if (${CMAKE_BUILD_TYPE} STREQUAL "Release")
FILTER_LIST("${Boost_LIBRARIES}" BOOST_MERGE_LIBS optimized debug)
else()
FILTER_LIST("${Boost_LIBRARIES}" BOOST_MERGE_LIBS debug optimized)
endif()
IF(MSVC)
	# To merge libs, just pass them to lib.exe command line.
	SET(LINKER_EXTRA_FLAGS "")
	FOREACH(LIB ${BOOST_MERGE_LIBS})
	MESSAGE(STATUS "LIB==" ${LIB})
	  SET(LINKER_EXTRA_FLAGS "${LINKER_EXTRA_FLAGS} ${LIB}")
	ENDFOREACH()
	SET_TARGET_PROPERTIES(sioclient PROPERTIES STATIC_LIBRARY_FLAGS
	  "${LINKER_EXTRA_FLAGS}")
ELSE()
	IF(APPLE)
	  # Use OSX's libtool to merge archives (ihandles universal
	  # binaries properly)
	  ADD_CUSTOM_COMMAND(TARGET ${TARGET} POST_BUILD
		COMMAND rm $<TARGET_FILE_NAME:$[TARGET}>
		COMMAND /usr/bin/libtool -static -o $<TARGET_FILE_NAME:$[TARGET}>
		${BOOST_MERGE_LIBS}
	  )
	ELSE()
	  # Generic Unix, Cygwin or MinGW. In post-build step, call
	  # script, that extracts objects from archives with "ar x"
	  # and repacks them with "ar r"
	  SET(TARGET ${TARGET})
	  CONFIGURE_FILE(
		${THIS_CMAKE_SCRIPT_DIR}/MergeStaticLibsPosix.cmake.in
		${CMAKE_CURRENT_BINARY_DIR}/merge_archives_${TARGET}.cmake
		@ONLY
	  )
	  ADD_CUSTOM_COMMAND(TARGET ${TARGET} POST_BUILD
		COMMAND rm $<TARGET_FILE_NAME:$[TARGET}>
		COMMAND ${CMAKE_COMMAND} -P
		${CMAKE_CURRENT_BINARY_DIR}/merge_archives_${TARGET}.cmake
	  )
	ENDIF()
  ENDIF()


#install(FILES ${BOOST_MERGE_LIBS} 
#    DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/Cpp/lib/${CMAKE_BUILD_TYPE}"
#)

